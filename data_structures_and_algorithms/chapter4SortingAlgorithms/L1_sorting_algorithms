class Influencer:
    def __init__(self, num_selfies, num_bio_links):
        self.num_selfies = num_selfies
        self.num_bio_links = num_bio_links

    def __repr__(self):
        return f"({self.num_selfies}, {self.num_bio_links})"


# dont touch above this line

def vanity(influencer):
    vanity_score = 0
    vanity_score = (influencer.num_bio_links * 5) + influencer.num_selfies
    return vanity_score

def vanity_sort(influencers):
    return sorted(influencers, key=vanity)


theprimeagen = Influencer(100, 1)
pokimane = Influencer(800, 2)
spambot = Influencer(0, 200)
lane = Influencer(10, 2)
badcop = Influencer(1, 2)

run_cases = [
    ([badcop, lane], [badcop, lane]),
    ([lane, badcop, pokimane], [badcop, lane, pokimane]),
    ([spambot, theprimeagen], [theprimeagen, spambot]),
]

submit_cases = run_cases + [
    ([], []),
    ([lane], [lane]),
    (
        [pokimane, theprimeagen, spambot, badcop, lane],
        [badcop, lane, theprimeagen, pokimane, spambot],
    ),
]


def test(input1, expected_output):
    print("---------------------------------")
    print(f"Input:\n * {input1}")
    print(f"Expecting: {expected_output}")
    result = vanity_sort(input1)
    print(f"Actual: {result}")
    if result == expected_output:
        print("Pass")
        return True
    print("Fail")
    return False


def main():
    passed = 0
    failed = 0
    skipped = len(submit_cases) - len(test_cases)
    for test_case in test_cases:
        correct = test(*test_case)
        if correct:
            passed += 1
        else:
            failed += 1
    if failed == 0:
        print("============= PASS ==============")
    else:
        print("============= FAIL ==============")
    if skipped > 0:
        print(f"{passed} passed, {failed} failed, {skipped} skipped")
    else:
        print(f"{passed} passed, {failed} failed")


test_cases = submit_cases
if "__RUN__" in globals():
    test_cases = run_cases

main()

# The below is from Grok
import unittest

class TestInfluencer(unittest.TestCase):
    def test_influencer_init(self):
        # Test Influencer object creation and attribute assignment
        influencer = Influencer(10, 2)
        self.assertEqual(influencer.num_selfies, 10)
        self.assertEqual(influencer.num_bio_links, 2)
    
    def test_influencer_repr(self):
        # Test string representation of Influencer
        influencer = Influencer(5, 3)
        self.assertEqual(str(influencer), "(5, 3)")
    
    def test_vanity_score(self):
        # Test vanity score calculation
        influencer = Influencer(4, 2)
        score = vanity(influencer)
        # Expected: (2 bio_links * 5) + 4 selfies = 14
        self.assertEqual(score, 14)
    
    def test_vanity_score_zero(self):
        # Test vanity score with zero values
        influencer = Influencer(0, 0)
        score = vanity(influencer)
        self.assertEqual(score, 0)
    
    def test_vanity_sort(self):
        # Test sorting influencers by vanity score
        influencers = [
            Influencer(1, 1),  # Score: (1 * 5) + 1 = 6
            Influencer(5, 2),  # Score: (2 * 5) + 5 = 15
            Influencer(0, 3)   # Score: (3 * 5) + 0 = 15
        ]
        sorted_influencers = vanity_sort(influencers)
        # Expected order: (1,1), (0,3), (5,2)
        # Since (0,3) and (5,2) have same score, order preserved
        self.assertEqual(
            [(i.num_selfies, i.num_bio_links) for i in sorted_influencers],
            [(1, 1), (0, 3), (5, 2)]
        )

#if __name__ == '__main__':
#    unittest.main()